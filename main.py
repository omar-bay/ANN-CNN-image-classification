# -*- coding: utf-8 -*-
"""Welcome To Colaboratory

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/notebooks/intro.ipynb
"""

import tensorflow as tf
from tensorflow.keras import datasets, layers, models
import matplotlib.pyplot as plt
import numpy as np

from sklearn.metrics import confusion_matrix, classification_report

# load the datasets
(X_train, y_train), (X_test, y_test) = datasets.cifar10.load_data()

y_train = y_train.reshape(-1,)

classes = ["airplane","automobile","bird","cat","deer","dog","frog","horse","ship","truck"]

# print the image sample
def plot_sample(X, y, index):
  plt.figure(figsize=(15,2))
  plt.imshow(X[0])
  plt.xlabel(classes[y[index]])

plot_sample(X_train, y_train, 0)

# normalizing values
X_train = X_train / 255
X_test = X_test / 255

# model building
ann = models.Sequential([
                         layers.Flatten(input_shape=(32,32,3)),   # input image
                         layers.Dense(3000, activation='relu'),   # first deep layer
                         layers.Dense(1000, activation='relu'),   # second deep layer
                         layers.Dense(10, activation='sigmoid'),  # number of categories
])

ann.compile(optimizer='SGD',
            loss='sparse_categorical_crossentropy',
            metrics=['accuracy'])

ann.fit(X_train, y_train, epochs=5)

ann.evaluate(X_test, y_test)

cnn = models.Sequential([
                         # cnn
                         layers.Conv2D(filters=32, kernel_size=(3,3), activation='relu', input_shape=(32,32,3)), # check 32 features
                         layers.MaxPooling2D((2,2)),

                         layers.Conv2D(filters=64, kernel_size=(3,3), activation='relu'),
                         layers.MaxPooling2D((2,2)),

                         # dense network
                         layers.Flatten(),
                         layers.Dense(64, activation='relu'),
                         layers.Dense(10, activation='softmax'),
])

cnn.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

cnn.fit(X_train, y_train, epochs=10)

cnn.evaluate(X_test,y_test)

y_test = y_test.reshape(-1,)
y_test[:5]

plot_sample(X_test, y_test, 1)

y_pred = cnn.predict(X_test)
y_pred[:5]

y_classes = [np.argmax(element) for element in y_pred]
y_classes[:5]

y_test[:5]

plot_sample(X_test, y_test, 1)

classes[y_classes[1]]

print("Classification Report: \n", classification_report(y_test, y_classes))